/*******************************************************************************************
*
*   raylib [core] example - 2d camera
*
*   This example has been created using raylib 1.5 (www.raylib.com)
*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details)
*
*   Copyright (c) 2016 Ramon Santamaria (@raysan5)
*
********************************************************************************************/

using System.Numerics;
using Raylib_cs;
using static Raylib_cs.Raylib;
using static Raylib_cs.KeyboardKey;
using static Raylib_cs.Color;

namespace Examples
{
    public class core_2d_camera
    {

        public static int Main()
        {
            // Initialization
            //--------------------------------------------------------------------------------------
            const int screenWidth = 800;
            const int screenHeight = 450;

            InitWindow(screenWidth, screenHeight, "raylib [core] example - 2d camera");

            Rectangle player = new Rectangle(400, 280, 40, 40);

            Camera2D camera = new Camera2D();
            camera.target = new Vector2(player.x + 20, player.y + 20);
            camera.offset = new Vector2(screenWidth / 2, screenHeight / 2);
            camera.rotation = 0.0f;
            camera.zoom = 1.0f;

            SetTargetFPS(60);
            //--------------------------------------------------------------------------------------

            // Main game loop
            while (!WindowShouldClose())    // Detect window close button or ESC key
            {
                // Update
                //----------------------------------------------------------------------------------

                // Player movement
                if (IsKeyDown(KEY_RIGHT))
                    player.x += 2;
                else if (IsKeyDown(KEY_LEFT))
                    player.x -= 2;
                else if (IsKeyDown(KEY_UP))
                    player.y -= 2;
                else if (IsKeyDown(KEY_DOWN))
                    player.y += 2;

                // Camera3D target follows player
                camera.target = new Vector2(player.x + 20, player.y + 20);

                // Camera3D rotation controls
                if (IsKeyDown(KEY_A))
                    camera.rotation--;
                else if (IsKeyDown(KEY_S))
                    camera.rotation++;

                // Limit camera rotation to 80 degrees (-40 to 40)
                if (camera.rotation > 40)
                    camera.rotation = 40;
                else if (camera.rotation < -40)
                    camera.rotation = -40;

                // Camera3D zoom controls
                camera.zoom += ((float)GetMouseWheelMove() * 0.05f);

                if (camera.zoom > 3.0f)
                    camera.zoom = 3.0f;
                else if (camera.zoom < 0.1f)
                    camera.zoom = 0.1f;

                // Camera3D reset (zoom and rotation)
                if (IsKeyPressed(KEY_R))
                {
                    camera.zoom = 1.0f;
                    camera.rotation = 0.0f;
                }
                //----------------------------------------------------------------------------------

                // Draw
                //----------------------------------------------------------------------------------
                BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawRectangleRec(new Rectangle(0, 0, 100, 100), BLUE);

                BeginMode2D(camera);

                DrawRectangleRec(player, RED);
                DrawRectangleRec(new Rectangle(0, 0, 100, 100), RED);
               // DrawRectangle((int)camera.target.X, -500, 1, (int)(screenHeight * 4), GREEN);
                //DrawLine((int)(-screenWidth * 10), (int)camera.target.Y, (int)(screenWidth * 10), (int)camera.target.Y, GREEN);

                EndMode2D();
                EndDrawing();
                //----------------------------------------------------------------------------------
            }

            // De-Initialization
            //--------------------------------------------------------------------------------------
            CloseWindow();        // Close window and OpenGL context
            //--------------------------------------------------------------------------------------

            return 0;
        }
    }
}